AWSTemplateFormatVersion: "2010-09-09"

Description: AWS CloudFormation workshop - Nested stacks - EC2 template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Amazon EC2 Configuration'
        Parameters:
          - AmiID

    ParameterLabels:
      AmiID:
        default: 'Amazon Machine Image ID'

Parameters:
  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: Test
    AllowedValues:
      - Dev
      - Test
      - Prod
    ConstraintDescription: 'Specify either Dev, Test or Prod.'

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'The VPC ID'

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'
  
  WebServerInstanceProfile:
    Type: String
    Description: 'Instance profile resource ID'

  # RDSEndpointAddress:
  #   Type: String
  #   Description: 'RDS Database Endpoint Address'

  # RDSMasterUsername:
  #   Type: String
  #   Description: 'RDS Database Username'

  # RDSMasterUserPassword:
  #   Type: String
  #   Description: 'RDS Database Password'

Mappings:
  EnvironmentToInstanceType:
    Dev:
      InstanceType: t2.nano
    Test:
      InstanceType: t2.micro
    Prod:
      InstanceType: t2.small

Resources:
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []

          # files:
          #   /var/www/html/index.php:
          #     content: |
          #       <!DOCTYPE html>
          #       <html>
          #       <body>
          #         <center>
          #           <?php
          #           # Get the instance ID from meta-data and store it in the $instance_id variable
          #           $url = "http://169.254.169.254/latest/meta-data/instance-id";
          #           $instance_id = file_get_contents($url);
          #           # Get the instance's availability zone from metadata and store it in the $zone variable
          #           $url = "http://169.254.169.254/latest/meta-data/placement/availability-zone";
          #           $zone = file_get_contents($url);
          #           # Get the instance AMI ID and store it in the $ami_id variable
          #           $url = "http://169.254.169.254/latest/meta-data/ami-id";
          #           $ami_id = file_get_contents($url);
          #           ?>
          #           <h2>EC2 Instance ID: <?php echo $instance_id ?></h2>
          #           <h2>Availability Zone: <?php echo $zone ?></h2>
          #           <h2>AMI ID: <?php echo $ami_id ?></h2>
          #         </center>
          #       </body>
          #       </html>
          #     mode: 000644
          #     owner: apache
          #     group: apache

          #   /etc/cfn/cfn-hup.conf:
          #     content: !Sub |
          #       [main]
          #       stack=${AWS::StackId}
          #       region=${AWS::Region}
          #       interval=1
          #     mode: 000400
          #     owner: root
          #     group: root

          #   /etc/cfn/hooks.d/cfn-auto-reloader.conf:
          #     content: !Sub |
          #       [cfn-auto-reloader-hook]
          #       triggers=post.update
          #       path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
          #       action=/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          #       runas=root

          #   /etc/cfn/simpleWeb.sql:
          #     content: |
          #       CREATE USER 'wordpress' IDENTIFIED BY 'wordpress-pass';
          #       GRANT ALL PRIVILEGES ON wordpress.* TO wordpress;
          #       FLUSH PRIVILEGES;
          #     mode: 000771
          #     owner: root
          #     group: root

          #   /etc/cfn/set_user_db.sh:
          #     content: !Sub |
          #       #!/bin/bash
          #       mysql -h '${RDSEndpointAddress}' -u '${RDSMasterUsername}' -p'${RDSMasterUserPassword}' < /etc/cfn/simpleWeb.sql
          #       wget https://wordpress.org/latest.tar.gz
          #       tar -zxvf latest.tar.gz -C /var/www/html/
          #       cp /var/www/wp-config.php /var/www/html/wordpress/wp-config.php
          #       sudo cp -r /var/www/html/wordpress/* /var/www/html/
          #       sudo chown -R apache:apache /var/www
          #       sudo chmod 2775 /var/www
          #       sudo service httpd restart
                
          #     mode: 000771
          #     owner: root
          #     group: root

          #   /var/www/wp-config.php:
          #     content: !Sub |
          #       <?php
          #       /**
          #       * The base configuration for WordPress
          #       *
          #       * The wp-config.php creation script uses this file during the installation.
          #       * You don't have to use the web site, you can copy this file to "wp-config.php"
          #       * and fill in the values.
          #       *
          #       * This file contains the following configurations:
          #       *
          #       * * Database settings
          #       * * Secret keys
          #       * * Database table prefix
          #       * * ABSPATH
          #       *
          #       * @link https://wordpress.org/documentation/article/editing-wp-config-php/
          #       *
          #       * @package WordPress
          #       */

          #       // ** Database settings - You can get this info from your web host ** //
          #       /** The name of the database for WordPress */
          #       define( 'DB_NAME', 'mydatabase' );

          #       /** Database username */
          #       define( 'DB_USER', '${RDSMasterUsername}' );

          #       /** Database password */
          #       define( 'DB_PASSWORD', '${RDSMasterUserPassword}' );

          #       /** Database hostname */
          #       define( 'DB_HOST', '${RDSEndpointAddress}' );

          #       /** Database charset to use in creating database tables. */
          #       define( 'DB_CHARSET', 'utf8' );

          #       /** The database collate type. Don't change this if in doubt. */
          #       define( 'DB_COLLATE', '' );

          #       /**#@+
          #       * Authentication unique keys and salts.
          #       *
          #       * Change these to different unique phrases! You can generate these using
          #       * the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
          #       *
          #       * You can change these at any point in time to invalidate all existing cookies.
          #       * This will force all users to have to log in again.
          #       *
          #       * @since 2.6.0
          #       */
          #       define( 'AUTH_KEY',         'Something' );
          #       define( 'SECURE_AUTH_KEY',  'Something' );
          #       define( 'LOGGED_IN_KEY',    'Something' );
          #       define( 'NONCE_KEY',        'Something' );
          #       define( 'AUTH_SALT',        'Something' );
          #       define( 'SECURE_AUTH_SALT', 'Something' );
          #       define( 'LOGGED_IN_SALT',   'Something' );
          #       define( 'NONCE_SALT',       'Something' );

          #       /**#@-*/

          #       /**
          #       * WordPress database table prefix.
          #       *
          #       * You can have multiple installations in one database if you give each
          #       * a unique prefix. Only numbers, letters, and underscores please!
          #       */
          #       $table_prefix = 'wp_';

          #       /**
          #       * For developers: WordPress debugging mode.
          #       *
          #       * Change this to true to enable the display of notices during development.
          #       * It is strongly recommended that plugin and theme developers use WP_DEBUG
          #       * in their development environments.
          #       *
          #       * For information on other constants that can be used for debugging,
          #       * visit the documentation.
          #       *
          #       * @link https://wordpress.org/documentation/article/debugging-in-wordpress/
          #       */
          #       define( 'WP_DEBUG', false );

          #       /* Add any custom values between this line and the "stop editing" line. */



          #       /* That's all, stop editing! Happy publishing. */

          #       /** Absolute path to the WordPress directory. */
          #       if ( ! defined( 'ABSPATH' ) ) {
          #               define( 'ABSPATH', __DIR__ . '/' );
          #       }

          #       /** Sets up WordPress vars and included files. */
          #       require_once ABSPATH . 'wp-settings.php';
          #     mode: 000644
          #     owner: apache
          #     group: apache
          # services:
          #   sysvinit:
          #     httpd:
          #       enabled: true
          #       ensureRunning: true

          #     cfn-hup:
          #       enabled: true
          #       ensureRunning: true
          #       files:
          #         - /etc/cfn/cfn-hup.conf
          #         - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    Properties:
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Join [ ' ', [ !Ref EnvironmentType, Simple Web Server ] ]
      # UserData:
      #   Fn::Base64:
      #     !Sub |
      #     #!/bin/bash -xe
      #     systemctl enable amazon-ssm-agent
      #     systemctl start amazon-ssm-agent
      #     /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
      #     /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
      #     amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
      #     yum -y install mariadb-server wget nmap
      #     sudo yum install -y mysql
      #     systemctl enable mariadb
      #     systemctl start mariadb
      #     systemctl enable httpds
      #     systemctl start httpd
      #     sudo /etc/cfn/set_user_db.sh

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp  
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp  
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance

Outputs:
  WebServerPublicDNS:
    Description: 'Public DNS of EC2 instance'
    Value: !GetAtt WebServerInstance.PublicDnsName

  WebServerElasticIP:
    Description: Elastic IP associated with the web server EC2 instance
    Value: !Ref WebServerEIP

  WebsiteURL:
    Value: !Sub http://${WebServerEIP}
    Description: Application URL
